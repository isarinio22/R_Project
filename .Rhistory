# Calculate mean and standard deviation of the combined values
combined_mean <- mean(combined_values)
combined_sd <- sd(combined_values)
# Normalize each column using the combined mean and standard deviation
df[[col_pair[1]]] <- (df[[col_pair[1]]] - combined_mean) / combined_sd
df[[col_pair[2]]] <- (df[[col_pair[2]]] - combined_mean) / combined_sd
return(df)
}
# Specify the column pairs to normalize
column_pairs <- list(
c("height_A", "height_B"),
c("age_A",    "age_B"),
c("reach_A", "reach_B"),
c("won_A",    "won_B"),
c("lost_A",   "lost_B"),
c("drawn_A",  "drawn_B"),
c("kos_A",    "kos_B")
)
# Apply normalization for each pair
for (pair in column_pairs) {
df <- normalize_by_pair(df, pair)
}
# at the end of this stage ill have the normalized version of my dataset.
#### Data Preview ----
prepare_data_for_plotting <- function(df, column_pairs) {
# Create an empty dataframe to store combined data
combined_data <- data.frame(value = numeric(),
group = character(),
pair  = character())
# Loop through each pair and add data
for (pair in column_pairs) {
# Combine data for the current pair
data_to_add <- data.frame(
value = c(df[[pair[1]]], df[[pair[2]]]),
group = rep(pair, each = nrow(df)),
pair  = paste(pair[1], "vs", pair[2])
)
# Append to the combined dataframe
combined_data <- rbind(combined_data, data_to_add)
}
return(combined_data)
}
# 5. Prepare data for plotting
plot_data <- prepare_data_for_plotting(df, column_pairs)
# 6. Load libraries
library(ggplot2)
library(RColorBrewer)
# 7. Create a combined plot with facets for each pair
#    Restrict the x-axis to [-3, 3] using scale_x_continuous().
ggplot(plot_data, aes(x = value, fill = group)) +
geom_density(alpha = 0.5) +
facet_wrap(~ pair, scales = "free") +
labs(
title = "Distributions of Variable Pairs (Standardized)",
x = "Z-Score Value",
y = "Density",
fill = "Group"
) +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-3, 3)) +  # Exclude data outside [-3, 3]
theme_minimal()
# after omitting the outliers (those that have |z| > 3 we can see that all the variables except the drawn are almost normal.)
# 1. Pivot df to long format
plot_data <- df %>%
pivot_longer(
cols = c("stance_A", "stance_B"),
names_to = "stance_type",     # indicates whether it's 'stance_A' or 'stance_B'
values_to = "stance"          # the actual stance value
)
# 2. Count the number of occurrences of each stance in stance_A vs stance_B
plot_data_count <- plot_data %>%
count(stance_type, stance)
# 3. Create a grouped bar chart
ggplot(plot_data_count, aes(x = stance, y = n, fill = stance_type)) +
geom_col(position = "dodge") +
labs(
title = "Distribution of Stances for A vs. B",
x = "Stance",
y = "Count",
fill = "Stance Type"
) +
theme_minimal()
# we can see that there is no difference between them.
# orthodox is more common because most of people are right handed.
# now ide like to present the decisions.
# 1. Create a new column `decision_group` with two categories:
#    - "KO" (for original decisions KO, TD, TKO)
#    - "POINTS" (for all other decisions)
df <- df %>%
mutate(
decision_group = case_when(
decision %in% c("KO", "TD", "TKO") ~ "KO",
TRUE ~ "POINTS"
)
)
# 2. Count how many rows fall into each group
df_group_counts <- df %>%
count(decision_group)
# 3. Plot a pie chart showing the distribution of KO vs. POINTS
ggplot(df_group_counts, aes(x = "", y = n, fill = decision_group)) +
geom_col(width = 1) +
coord_polar("y", start = 0) +  # Converts the bar chart to a pie chart
labs(
title = "Distribution of Decision Groups (KO vs POINTS)",
fill  = "Decision Group"
) +
theme_void()  # Removes axes and adds a cleaner look for a pie chart
#explanatio of boxing decisions
# KO (Knockout): The loser is rendered unable to continue by strikes.
# TKO (Technical Knockout): The referee/corner stops the fight due to a fighter’s inability to safely continue.
# TD (Technical Draw / Decision): The fight ends early (often due to an accidental injury), and the outcome is decided on partial scorecards or ruled a draw.
# DQ (Disqualification): A fighter is disqualified for fouls or unsportsmanlike conduct.
# MD (Majority Decision): Two judges score the fight for one boxer, the third scores it a draw (2–0–1).
# SD (Split Decision): Two judges favor one boxer, the third favors the other (2–1).
# UD (Unanimous Decision): All judges favor the same boxer (3–0).
# PTS (Points): A fight decided by judges’ scores after going the distance (commonly used in some regions).
# RTD (Retired): A boxer (or their corner) chooses not to continue between rounds.
# NWS (Newspaper Decision): An older, unofficial scoring method used historically when official decisions weren’t rendered.
# I grouped KO, TD, and TKO together as "KO" because these all imply a
# stoppage or knockout-like outcome—this is often more dramatic and
# could be considered an “interesting” finish.
# Everything else is grouped into "POINTS", which generally indicates
# a fight decided by the judges (e.g., UD, SD, MD, PTS)—sometimes considered
# less “exciting” from a casual fan’s perspective than a knockout, but still
# a valid outcome.
# The goal is to see how many fights end in a knockout (KO) vs. go to
# the scorecards (POINTS), which can help gauge how “interesting” or
# explosive the fights might be.
write.csv(df, "df_saved.csv", row.names = FALSE)
#### Formulate the question ----
# Which factors best predict the type of decision?
# For example: “Are fights more likely to end by KO when one fighter’s height or reach is significantly greater than the other’s?”
# Does age difference influence the likelihood of a finish (KO) vs. going to the judges (POINTS)?
#
# For example: “Are younger fighters more likely to win by KO, while older fighters go the distance more often?”
# How does stance (Orthodox vs. Southpaw) affect fight outcomes?
#
# For example: “Is there an association between stance type and the type of decision (KO vs. POINTS)?”
# Do a fighter’s past KOs predict the fight’s outcome type?
#
# For example: “Does a fighter with a higher number of KO wins have a significantly greater chance of achieving another KO?”
# and if i try to conclude all of them to one question - "Which factors best predict the type of decision" and this will be my question.
####libraries and instalations ----
install.packages("tidyverse")
install.packages("ggdist")
install.packages("ggplot2")
install.packages("patchwork")
library(tidyverse)
library(ggdist)
library(dplyr)
library(ggplot2)
set.seed(123)
#### short explanation on the dataset and why i chose it ----
# The boxing_matches.csv dataset provides a comprehensive record of boxing matches, focusing on the physical
# characteristics, performance history, and outcomes of the competitors.
# Each row represents a single match and includes details about the two boxers (A and B), the match results,
# and the judges' scores.
# This dataset combines physical, historical, and match-level data, making it a powerful resource for
# exploring the multifaceted world of boxing analytics
# As a passionate boxer who practices both classic boxing and thai boxing,
# I have a deep personal and professional connection to the world of boxing. This dataset allows me to
# merge my love for the sport with my analytical skills, offering a unique opportunity to explore the
# intricacies of boxing at a detailed level
# age_A / age_B: The age of Boxer A / Boxer B at the time of the match.
# height_A / height_B: The height of Boxer A / Boxer B, centimeters.
# reach_A / reach_B: The reach of Boxer A / Boxer B, typically the distance from fingertip to fingertip when arms are extended.
# stance_A / stance_B: The fighting stance of Boxer A / Boxer B (e.g., orthodox, southpaw).
# weight_A / weight_B: The weight of Boxer A / Boxer B at the time of the match, pounds.
# won_A / won_B: The total number of matches won by Boxer A / Boxer B before this fight.
# lost_A / lost_B: The total number of matches lost by Boxer A / Boxer B before this fight.
# drawn_A / drawn_B: The total number of matches that ended in a draw for Boxer A / Boxer B before this fight.
# kos_A / kos_B: The number of matches Boxer A / Boxer B has won by knockout before this fight.
# result: The result of the match, indicating which boxer won (e.g., "A", "B", or "draw").
# decision: The type of decision that determined the result (e.g., "KO", "TKO", "unanimous decision").
# judge_A / judge_B: The score given to Boxer A / Boxer B by the Judge, see we have 3 of them.
#### Data processing and cleaning ----
df <- read_csv("boxing_matches.csv")
# Drop all columns containing "judge"
df <- df %>% select(-matches("judge"))
# only taking observation when they weight the same
df <- df[df$weight_A == df$weight_B, ]
df <- df %>% select(-matches("weight"))
#omiting result
df <- df %>% select(-matches("result"))
# only taking rows i have all the information. i allowed myself to do so becuase even so i have 2455 observations.
df <- df[complete.cases(df), ]
# Normalize each pair of columns (e.g., height_A and height_B)
normalize_by_pair <- function(df, col_pair) {
# Combine values from both columns
combined_values <- c(df[[col_pair[1]]], df[[col_pair[2]]])
# Calculate mean and standard deviation of the combined values
combined_mean <- mean(combined_values)
combined_sd <- sd(combined_values)
# Normalize each column using the combined mean and standard deviation
df[[col_pair[1]]] <- (df[[col_pair[1]]] - combined_mean) / combined_sd
df[[col_pair[2]]] <- (df[[col_pair[2]]] - combined_mean) / combined_sd
return(df)
}
# Specify the column pairs to normalize
column_pairs <- list(
c("height_A", "height_B"),
c("age_A",    "age_B"),
c("reach_A", "reach_B"),
c("won_A",    "won_B"),
c("lost_A",   "lost_B"),
c("drawn_A",  "drawn_B"),
c("kos_A",    "kos_B")
)
# Apply normalization for each pair
for (pair in column_pairs) {
df <- normalize_by_pair(df, pair)
}
# at the end of this stage ill have the normalized version of my dataset.
#### Data Preview ----
prepare_data_for_plotting <- function(df, column_pairs) {
# Create an empty dataframe to store combined data
combined_data <- data.frame(value = numeric(),
group = character(),
pair  = character())
# Loop through each pair and add data
for (pair in column_pairs) {
# Combine data for the current pair
data_to_add <- data.frame(
value = c(df[[pair[1]]], df[[pair[2]]]),
group = rep(pair, each = nrow(df)),
pair  = paste(pair[1], "vs", pair[2])
)
# Append to the combined dataframe
combined_data <- rbind(combined_data, data_to_add)
}
return(combined_data)
}
# 5. Prepare data for plotting
plot_data <- prepare_data_for_plotting(df, column_pairs)
# 6. Load libraries
library(ggplot2)
library(RColorBrewer)
# 7. Create a combined plot with facets for each pair
#    Restrict the x-axis to [-3, 3] using scale_x_continuous().
ggplot(plot_data, aes(x = value, fill = group)) +
geom_density(alpha = 0.5) +
facet_wrap(~ pair, scales = "free") +
labs(
title = "Distributions of Variable Pairs (Standardized)",
x = "Z-Score Value",
y = "Density",
fill = "Group"
) +
scale_fill_brewer(palette = "Set2") +
scale_x_continuous(limits = c(-3, 3)) +  # Exclude data outside [-3, 3]
theme_minimal()
# after omitting the outliers (those that have |z| > 3 we can see that all the variables except the drawn are almost normal.)
# 1. Pivot df to long format
plot_data <- df %>%
pivot_longer(
cols = c("stance_A", "stance_B"),
names_to = "stance_type",     # indicates whether it's 'stance_A' or 'stance_B'
values_to = "stance"          # the actual stance value
)
# 2. Count the number of occurrences of each stance in stance_A vs stance_B
plot_data_count <- plot_data %>%
count(stance_type, stance)
# 3. Create a grouped bar chart
ggplot(plot_data_count, aes(x = stance, y = n, fill = stance_type)) +
geom_col(position = "dodge") +
labs(
title = "Distribution of Stances for A vs. B",
x = "Stance",
y = "Count",
fill = "Stance Type"
) +
theme_minimal()
# we can see that there is no difference between them.
# orthodox is more common because most of people are right handed.
# now ide like to present the decisions.
# 1. Create a new column `decision_group` with two categories:
#    - "KO" (for original decisions KO, TD, TKO)
#    - "POINTS" (for all other decisions)
df <- df %>%
mutate(
decision_group = case_when(
decision %in% c("KO", "TD", "TKO") ~ "KO",
TRUE ~ "POINTS"
)
)
# 2. Count how many rows fall into each group
df_group_counts <- df %>%
count(decision_group)
# 3. Plot a pie chart showing the distribution of KO vs. POINTS
ggplot(df_group_counts, aes(x = "", y = n, fill = decision_group)) +
geom_col(width = 1) +
coord_polar("y", start = 0) +  # Converts the bar chart to a pie chart
labs(
title = "Distribution of Decision Groups (KO vs POINTS)",
fill  = "Decision Group"
) +
theme_void()  # Removes axes and adds a cleaner look for a pie chart
#explanatio of boxing decisions
# KO (Knockout): The loser is rendered unable to continue by strikes.
# TKO (Technical Knockout): The referee/corner stops the fight due to a fighter’s inability to safely continue.
# TD (Technical Draw / Decision): The fight ends early (often due to an accidental injury), and the outcome is decided on partial scorecards or ruled a draw.
# DQ (Disqualification): A fighter is disqualified for fouls or unsportsmanlike conduct.
# MD (Majority Decision): Two judges score the fight for one boxer, the third scores it a draw (2–0–1).
# SD (Split Decision): Two judges favor one boxer, the third favors the other (2–1).
# UD (Unanimous Decision): All judges favor the same boxer (3–0).
# PTS (Points): A fight decided by judges’ scores after going the distance (commonly used in some regions).
# RTD (Retired): A boxer (or their corner) chooses not to continue between rounds.
# NWS (Newspaper Decision): An older, unofficial scoring method used historically when official decisions weren’t rendered.
# I grouped KO, TD, and TKO together as "KO" because these all imply a
# stoppage or knockout-like outcome—this is often more dramatic and
# could be considered an “interesting” finish.
# Everything else is grouped into "POINTS", which generally indicates
# a fight decided by the judges (e.g., UD, SD, MD, PTS)—sometimes considered
# less “exciting” from a casual fan’s perspective than a knockout, but still
# a valid outcome.
# The goal is to see how many fights end in a knockout (KO) vs. go to
# the scorecards (POINTS), which can help gauge how “interesting” or
# explosive the fights might be.
write.csv(df, "df_saved.csv", row.names = FALSE)
#### Formulate the question ----
# Which factors best predict the type of decision?
# For example: “Are fights more likely to end by KO when one fighter’s height or reach is significantly greater than the other’s?”
# Does age difference influence the likelihood of a finish (KO) vs. going to the judges (POINTS)?
#
# For example: “Are younger fighters more likely to win by KO, while older fighters go the distance more often?”
# How does stance (Orthodox vs. Southpaw) affect fight outcomes?
#
# For example: “Is there an association between stance type and the type of decision (KO vs. POINTS)?”
# Do a fighter’s past KOs predict the fight’s outcome type?
#
# For example: “Does a fighter with a higher number of KO wins have a significantly greater chance of achieving another KO?”
# and if i try to conclude all of them to one question - "Which factors best predict the type of decision" and this will be my question.
install.packages("ggdist")
install.packages("patchwork")
install.packages("tidyverse")
install.packages("ggplot2")
install.packages("ggplot2")
#### libraries and installations -----
# load the df
df <- read.csv("df_saved.csv")
#libraries
install.packages(c("broom", "ggplot2"))
installed.packages("ggplot")
install.packages("glmnet")
install.packages("pROC")
# Load libraries
library(broom)
library(ggplot2)
library(dplyr)
library(glmnet)
library(pROC)
# adding the diffrences
df$age_diff    <- df$age_A    - df$age_B
df$height_diff <- df$height_A - df$height_B
df$reach_diff  <- df$reach_A  - df$reach_B
df$kos_diff    <- df$kos_A    - df$kos_B
df$dec_bin <- ifelse(df$decision_group == "KO", 1, 0)
#### Logistic regression ----
x <- model.matrix(dec_bin ~ age_diff + height_diff + reach_diff + kos_diff, data = df)[, -1]
y <- df$dec_bin
# Fit a logistic model with L1 penalty (lasso)
fit_lasso <- glmnet(x, y, family = "binomial", alpha = 1)
# Cross-validate to choose best lambda
cv_lasso <- cv.glmnet(x, y, family = "binomial", alpha = 1)
# Best lambda
best_lambda <- cv_lasso$lambda.min
# Final model at that lambda
final_lasso <- glmnet(x, y, family = "binomial", alpha = 1, lambda = best_lambda)
coef(final_lasso)
"intercept - The negative intercept (-0.393) indicates a below-50% baseline probability of KO
when both fighters are equal in age, height, reach, and KOs"
"The negative coefficient for age_diff (-0.718) shows that if Fighter A is older by one standard
deviation, the odds of a KO decrease."
"The small negative effect for height_diff (-0.129) suggests a slight drop in KO odds when Fighter
A is taller."
"The small positive coefficient for reach_diff (0.032) implies that a greater reach for
Fighter A very slightly raises the likelihood of a KO"
"Finally, kos_diff (0.118) is moderately positive, meaning that if Fighter A has more KO wins by one standard deviation, the odds of getting a KO
in this fight increase."
# transform lasso to logistic regression
lasso_coefs <- coef(final_lasso)
# Convert to numeric vector (they're in a sparse format)
coef_values <- as.numeric(lasso_coefs)
# Get row names for each coefficient (variable name)
coef_names <- rownames(lasso_coefs)
# Find which coefficients are nonzero
nonzero_idx <- which(coef_values != 0)
# Get the names, excluding the intercept
selected_vars <- coef_names[nonzero_idx]
selected_vars <- setdiff(selected_vars, "(Intercept)")
# Build a formula string like "dec_bin ~ age_diff + kos_diff" etc.
formula_str <- paste("dec_bin ~", paste(selected_vars, collapse = " + "))
# Convert that string to an R formula
model_formula <- as.formula(formula_str)
# Fit a standard logistic regression using glm()
model_selected <- glm(model_formula, data = df, family = binomial(link = "logit"))
# Check summary (includes p-values, standard errors, etc.)
summary(model_selected)
# Overall, age_diff and kos_diff show the strongest associations (both highly significant):
#
# Being older than your opponent reduces KO probability,
# Having more previous KOs raises KO probability.
# visualization.
df$pred_prob <- predict(model_selected, type = "response")
# Create ROC object
roc_obj <- roc(df$dec_bin, df$pred_prob)
# Plot the ROC curve
plot(roc_obj,
main = "ROC Curve for Logistic Regression Model",
col = "blue",
lwd = 2)
# Calculate and add AUC to the plot
auc_value <- auc(roc_obj)
legend("bottomright", legend = paste("AUC =", round(auc_value, 3)), col = "blue", lwd = 2)
threshold <- 0.5
df$pred_class <- ifelse(df$pred_prob > threshold, 1, 0)
# Create confusion matrix
conf_matrix <- table(Actual = df$dec_bin, Predicted = df$pred_class)
print(conf_matrix)
# # Interpretation:
# # High Specificity (96.92%): Your model is very good at correctly identifying POINTS outcomes (Actual 0) as 0.
# # Low Recall (3.94%): The model struggles significantly to identify KO outcomes (Actual 1). Only about 4%
# of actual KOs are correctly predicted.  Moderate Precision (47.62%): When the model predicts a KO (1),
# it's correct about 48% of the time.   Overall Accuracy (58.47%): Slightly better than random guessing (50%)
# but not particularly strong.
# # F1-Score (7.36%): This low score indicates poor balance between precision and recall, especially for
# the positive class (KO).
####Linear regression ----
# 1) Ensure stance_A is a factor
df$stance_A <- as.factor(df$stance_A)
# 2) Fit a simple linear regression
model_kos_A <- lm(kos_A ~ age_A + height_A + reach_A + stance_A + won_A + lost_A + drawn_A,
data = df)
# 3) Inspect the summary
summary(model_kos_A)
# 4) Check residuals, diagnostic plots
par(mfrow = c(2, 2))
plot(model_kos_A)
# **(Intercept) = 0.044375 (p = 0.00118 )
#
# Meaning: When all predictors are zero (i.e., Fighter A and Fighter B are identical in age, height, reach, stance, and fight record), the baseline number of KO wins for Fighter A is approximately 0.044.
# Interpretation: While the intercept has statistical significance, its practical interpretation should be cautious since having all predictors at zero may not be meaningful in the real-world context.
# **Age (age_A) = 0.769688 (p < 2e-16 *)
#
# Meaning: For each one-unit increase in Fighter A's age (standardized), the number of KO wins increases by approximately 0.77, holding all other factors constant.
# Significance: Highly significant (***) indicating a strong positive relationship between age and KO wins.
# Height (height_A) = 0.001201 (p = 0.94791)
#
# Meaning: For each one-unit increase in Fighter A's height (standardized), the number of KO wins increases by 0.0012, which is negligible.
# Significance: Not statistically significant, suggesting no meaningful relationship between height and KO wins in this model.
# Reach (reach_A) = 0.025360 (p = 0.26531)
#
# Meaning: For each one-unit increase in Fighter A's reach (standardized), the number of KO wins increases by 0.025, holding other variables constant.
# Significance: Not statistically significant, indicating no strong evidence of a relationship between reach and KO wins.
# **Stance (stance_Asouthpaw) = -0.122879 (p = 6.54e-06 *)
#
# Meaning: Being a southpaw fighter (as opposed to the reference category, typically orthodox) is associated with a decrease of approximately 0.123 KO wins.
# Significance: Highly significant (***) suggesting that stance type has a meaningful impact on KO wins.
# **Wins (won_A) = 0.865661 (p < 2e-16 *)
#
# Meaning: For each one-unit increase in Fighter A's total wins, the number of KO wins increases by approximately 0.866, holding other factors constant.
# Significance: Highly significant (***) indicating a strong positive relationship between total wins and KO wins.
# **Losses (lost_A) = -0.121459 (p = 1.86e-08 *)
#
# Meaning: For each one-unit increase in Fighter A's total losses, the number of KO wins decreases by approximately 0.121, holding other factors constant.
# Significance: Highly significant (***) suggesting that more losses are associated with fewer KO wins.
# **Draws (drawn_A) = -0.208203 (p < 2e-16 *)
#
# Meaning: For each one-unit increase in Fighter A's total draws, the number of KO wins decreases by approximately 0.208, holding other factors constant.
# Significance: Highly significant (***) indicating that more draws are associated with fewer KO wins.
#
# Multiple R-squared = 0.7031
#
# Meaning: Approximately 70.31% of the variability in Fighter A's KO wins is explained by the model.
# Significant Positive Predictors:
#
#   Age (age_A): Older fighters tend to have more KO wins.
# Wins (won_A): Fighters with more overall wins also accumulate more KO wins.
# Significant Negative Predictors:
#
#   Stance (stance_Asouthpaw): Being a southpaw fighter is associated with fewer KO wins compared to the reference stance.
# Losses (lost_A) and Draws (drawn_A): More losses and draws are associated with fewer KO wins.
# Non-Significant Predictors:
#
#   Height (height_A) and Reach (reach_A): These attributes do not have a statistically significant relationship with the number of KO wins in this model.
# Model Performance:
#
#   The model explains a substantial portion (~70%) of the variance in Fighter A's KO wins, indicating it captures key factors influencing KO success.
# Implications
# Age and Experience Matter: Older fighters and those with more wins are more likely to have higher KO counts, suggesting experience and perhaps power accumulation play significant roles.
#
# Stance Impact: Southpaw fighters have fewer KO wins compared to their counterparts, which could be due to various strategic or matchup-related factors.
#
# Record Indicators: Losses and draws negatively impact KO counts, potentially reflecting overall skill or effectiveness in securing knockouts.
#
# Physical Attributes Less Impactful: Contrary to some expectations, height and reach do not significantly predict KO wins in this model, indicating that other factors like experience and stance might be more crucial.
# Tidy the model to extract estimates and confidence intervals
tidy_model <- tidy(model_kos_A, conf.int = TRUE)
tidy_model_no_intercept <- tidy_model %>%
filter(term != "(Intercept)")
ggplot(tidy_model_no_intercept, aes(x = estimate, y = term)) +
geom_point(size = 3, color = "blue") +
geom_errorbarh(aes(xmin = conf.low, xmax = conf.high), height = 0.2, color = "gray") +
geom_vline(xintercept = 0, linetype = "dashed") +
labs(
title = "Effect of Predictors on Fighter A's KO Wins",
x = "Estimated Coefficient",
y = "Predictor Variables"
) +
theme_minimal()
install.packages(c("broom", "ggplot2"))
install.packages(c("broom", "ggplot2"))
